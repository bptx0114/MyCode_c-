<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,1]" as_ord="1">open_framegrabber ('DirectShow', 1, 1, 0, 0, 0, 0, 'default', 8, 'rgb', -1, 'false', 'default', '[0] FULL HD 1080P Webcam', 0, -1, AcqHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">grab_image_start (AcqHandle, -1)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">while (true)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    grab_image_async (Image, AcqHandle, -1)</l>
<l>    rgb1_to_gray (Image, GrayImage)  </l>
<l>    threshold (GrayImage, Regions1, 162, 255)</l>
<l>    connection (Regions1, ConnectedRegions)</l>
<l>    select_shape (Regions1, SelectedRegions, 'area', 'and', 0, 789908)</l>
<l>    area_center (SelectedRegions, Area, Row, Column)</l>
<l>    disp_message (WindowHandle, '面积'+Area+'坐标'+Row+' '+Column, 'window', 0, 0, 'white', 'false')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endwhile</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_measure_positions">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="PlateRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CalibDataID" base_type="ctrl" dimension="0"/>
<par name="PoseIndex" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Distance" base_type="ctrl" dimension="0"/>
<par name="Phi" base_type="ctrl" dimension="0"/>
<par name="RowCenter" base_type="ctrl" dimension="0"/>
<par name="ColumnCenter" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Extract the calibration plate</c>
<l>threshold (Image, Region, 0, 120)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, ['holes_num','rect2_len1','rect2_len2'], 'and', [1,120,120], [1,200,200])</l>
<l>fill_up (SelectedRegions, PlateRegion)</l>
<c>* Construct the measurement rectangle from the border of the table.</c>
<l>gen_contour_region_xld (PlateRegion, Contours, 'center')</l>
<l>segment_contours_xld (Contours, ContoursSplit, 'lines', 7, 4, 2)</l>
<l>regress_contours_xld (ContoursSplit, RegressContours, 'no', 1)</l>
<l>select_contours_xld (RegressContours, VerticalContours, 'direction', rad(45), rad(135), -0.5, 0.5)</l>
<l>select_contours_xld (VerticalContours, LongContours, 'length', 150, 500, -0.5, 0.5)</l>
<c>* The measurement line is constructed from the center points of the</c>
<c>* two vertical border lines of the table.</c>
<l>select_obj (LongContours, Contour, 1)</l>
<l>get_contour_xld (Contour, Rows, Columns)</l>
<l>RowBegin1 := Rows[0]</l>
<l>ColBegin1 := Columns[0]</l>
<l>RowEnd1 := Rows[|Rows| - 1]</l>
<l>ColEnd1 := Columns[|Columns| - 1]</l>
<l>select_obj (LongContours, Contour, 2)</l>
<l>get_contour_xld (Contour, Rows, Columns)</l>
<l>RowBegin2 := Rows[0]</l>
<l>ColBegin2 := Columns[0]</l>
<l>RowEnd2 := Rows[|Rows| - 1]</l>
<l>ColEnd2 := Columns[|Columns| - 1]</l>
<c>* Now do the actual measurement in the image</c>
<l>get_calib_data_observ_points (CalibDataID, 0, 0, PoseIndex - 1, Row, Column, PoseIndex, _Pose)</l>
<l>Row1 := Row[find(PoseIndex,21)]</l>
<l>Row2 := Row[find(PoseIndex,27)]</l>
<l>Column1 := Column[find(PoseIndex,21)]</l>
<l>Column2 := Column[find(PoseIndex,27)]</l>
<l>intersection_lines (Row1, Column1, Row2, Column2, RowBegin1, ColBegin1, RowEnd1, ColEnd1, RowA, ColA, IsOverlapping)</l>
<l>intersection_lines (Row1, Column1, Row2, Column2, RowBegin2, ColBegin2, RowEnd2, ColEnd2, RowB, ColB, IsOverlapping)</l>
<l>distance_pp (RowA, ColA, RowB, ColB, Distance)</l>
<l>line_orientation (RowA, ColA, RowB, ColB, Phi)</l>
<l>RowCenter := (RowA + RowB) / 2</l>
<l>ColumnCenter := (ColA + ColB) / 2</l>
<l>return ()</l>
</body>
<docu id="get_measure_positions">
<parameters>
<parameter id="CalibDataID"/>
<parameter id="ColumnCenter"/>
<parameter id="Distance"/>
<parameter id="Image"/>
<parameter id="Phi"/>
<parameter id="PlateRegion"/>
<parameter id="PoseIndex"/>
<parameter id="RowCenter"/>
</parameters>
</docu>
</procedure>
</hdevelop>
